global
    maxconn 50000
    log stdout format raw local0
    stats socket ipv4@0.0.0.0:9999 level admin
    stats timeout 2m

resolvers docker_resolver
    nameserver dns 127.0.0.11:53
    accepted_payload_size 8192

defaults
    timeout connect 10s
    timeout client 30s
    timeout server 30s
    log global
    mode http
    option httplog
    option log-health-checks
    option dontlog-normal
    option forwardfor
    option http-use-htx
    maxconn 3000
    default-server init-addr none

frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST

#####################
# Kong listen ports #
#####################

#
# Expose Kong ports on :443
#
frontend local-https-shared
    bind *:443 ssl crt /tmp/ssl/customcerts/smallstep/combined-wild.pem alpn h2,http/1.1 tfo
    bind *:80
    mode http
    use_backend kong_http_proxy_nodes if { hdr(host) -i proxy.kong.lan }
    use_backend kong_http_admin_api_nodes if { hdr(host) -i api.kong.lan }
    use_backend kong_http_manager_nodes if { hdr(host) -i manager.kong.lan }
    use_backend kong_http_dev_portal_nodes if { hdr(host) -i portal.kong.lan }
    use_backend kong_http_dev_portal_nodes if { hdr(host) -i default.portal.kong.lan }
    use_backend kong_http_dev_portal_api_nodes if { hdr(host) -i portal-api.kong.lan }
    use_backend utility_smtp_nodes if { hdr(host) -i mail.kong.lan }
    use_backend utility_graylog_nodes if { hdr(host) -i graylog.kong.lan }
    use_backend utility_locust_nodes if { hdr(host) -i locust.kong.lan }
    use_backend utility_kafka_ui_nodes if { hdr(host) -i kafka-ui.kong.lan }
    use_backend utility_ha_proxy_nodes if { hdr(host) -i ha-proxy.kong.lan }
    use_backend utility_redis_commander_nodes if { hdr(host) -i redis-commander.kong.lan }
    use_backend utility_opa_nodes if { hdr(host) -i opa.kong.lan }
    use_backend utility_web-server_nodes if { hdr(host) -i web-server.kong.lan }
    default_backend kong_http_proxy_nodes

#
# Kong Proxy port
#
frontend local-http-proxy
    bind *:8000
    mode http
    default_backend kong_http_proxy_nodes

frontend local-https-proxy
    bind *:8443
    mode tcp
    option tcplog
    default_backend kong_https_proxy_nodes

#
# Kong Stream port
#
frontend local-tcp-proxy
    bind *:5555
    mode tcp
    option tcplog
    default_backend kong_tcp_stream_nodes

frontend local-tcps-proxy
    bind *:5556
    mode tcp
    option tcplog
    default_backend kong_tcps_stream_nodes

#
# Kong Admin API port
#
frontend local-http-admin-api
    bind *:8001
    mode http
    default_backend kong_http_admin_api_nodes

frontend local-https-admin-api
    bind *:8444
    mode tcp
    option tcplog
    default_backend kong_https_admin_api_nodes

#
# Kong Kong Manager GUI port
#
frontend local-http-manager
    bind *:8002
    mode http
    default_backend kong_http_manager_nodes

frontend local-https-manager
    bind *:8445
    mode tcp
    option tcplog
    default_backend kong_https_manager_nodes

#
# Kong Dev Portal GUI port
#
frontend local-http-dev-portal
    bind *:8003
    mode http
    default_backend kong_http_dev_portal_nodes

frontend local-https-dev-portal
    bind *:8446
    mode tcp
    option tcplog
    default_backend kong_https_dev_portal_nodes

#
# Kong Dev Portal API port
#
frontend local-http-dev-portal-api
    bind *:8004
    mode http
    default_backend kong_http_dev_portal_api_nodes

frontend local-https-dev-portal-api
    bind *:8447
    mode tcp
    option tcplog
    default_backend kong_https_dev_portal_api_nodes
#
# Kong Status port
#
frontend local-https-status
    bind *:8100
    mode tcp
    option tcplog
    default_backend kong_https_status_nodes

#
# Utility web server
#
frontend local-https-webserver
    bind *:8181
    mode tcp
    option tcplog
    default_backend utility_web-server_nodes


######################
# Kong cluster nodes #
######################

#
# Kong Proxy nodes
#
backend kong_http_proxy_nodes
    mode http
    balance roundrobin
    http-response set-header x-kong-dp-node %si
    server-template kong-proxy-http 20 kong-dp:48000 check resolvers docker_resolver init-addr none

backend kong_https_proxy_nodes
    mode tcp
    server-template kong-proxy-https 20 kong-dp:48443 check resolvers docker_resolver init-addr none

#
# Kong Stream port
#
backend kong_tcp_stream_nodes
    mode tcp
    server-template kong-stream-tcp 20 kong-dp:45555 check resolvers docker_resolver init-addr none

backend kong_tcps_stream_nodes
    mode tcp
    server-template kong-stream-tcps 20 kong-dp:45556 check resolvers docker_resolver init-addr none

#
# Kong Admin API nodes
#
backend kong_http_admin_api_nodes
    mode http
    balance roundrobin
    http-response set-header x-kong-cp-node %si
    server-template kong-http-admin-api 20 kong-cp:48001 check resolvers docker_resolver init-addr none

backend kong_https_admin_api_nodes
    mode tcp
    server-template kong-https-admin-api 20 kong-cp:48444 check resolvers docker_resolver init-addr none

#
# Kong Manager nodes
#
backend kong_http_manager_nodes
    mode http
    balance roundrobin
    http-response set-header x-kong-cp-node %si
    server-template kong-http-manager 20 kong-cp:48002 check resolvers docker_resolver init-addr none

backend kong_https_manager_nodes
    mode tcp
    server-template kong-https-manager 20 kong-cp:48445 check resolvers docker_resolver init-addr none

#
# Kong Dev Portal GUI nodes
#
backend kong_http_dev_portal_nodes
    mode http
    balance roundrobin
    http-response set-header x-kong-cp-node %si
    server-template kong-http-dev-portal 20 kong-cp:48003 check resolvers docker_resolver init-addr none

backend kong_https_dev_portal_nodes
    mode tcp
    server-template kong-https-dev-portal 20 kong-cp:48446 check resolvers docker_resolver init-addr none

#
# Kong Dev Portal API nodes
#
backend kong_http_dev_portal_api_nodes
    mode http
    balance roundrobin
    http-response set-header x-kong-cp-node %si
    server-template kong-http-dev-portal-api 20 kong-cp:48004 check resolvers docker_resolver init-addr none

backend kong_https_dev_portal_api_nodes
    mode tcp
    server kongpose_kong-cp_1 kongpose_kong-cp_1:48447 check resolvers docker_resolver
    server-template kong-https-dev-portal-api 20 kong-cp:48447 check resolvers docker_resolver init-addr none

#
# Kong Status nodes
#
backend kong_https_status_nodes
    mode tcp
    server-template kong-https-status 20 kong-cp:48100 check resolvers docker_resolver init-addr none

#
# Utility services
#
backend utility_smtp_nodes
    mode http
    balance roundrobin
    server-template utility-smtp 20 fake-smtp-server:1080 check resolvers docker_resolver init-addr none

backend utility_graylog_nodes
    mode http
    balance roundrobin
    server-template utility-graylog 20 graylog:9000 check resolvers docker_resolver init-addr none

backend utility_locust_nodes
    mode http
    balance roundrobin
    server-template utility-locust 20 locust:8089 check resolvers docker_resolver init-addr none

backend utility_kafka_ui_nodes
    mode http
    balance roundrobin
    server-template utility-kafka-ui 20 kafka-ui:8080 check resolvers docker_resolver init-addr none

backend utility_ha_proxy_nodes
    mode http
    balance roundrobin
    server-template utility-haproxy 20 ha-proxy:8404 check resolvers docker_resolver init-addr none

backend utility_redis_commander_nodes
    mode http
    balance roundrobin
    server-template utility-redis-commander 20 redis-commander:8081 check resolvers docker_resolver init-addr none

backend utility_opa_nodes
    mode http
    balance roundrobin
    server-template utility-opa 20 opa:8181 check resolvers docker_resolver init-addr none

backend utility_web-server_nodes
    mode http
    balance roundrobin
    server-template utility-web-server 20 kong-cp:8181 check resolvers docker_resolver init-addr none
