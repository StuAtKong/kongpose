version: '2.1'

networks:
  case-kong-net:
    name: case-kong-net
    driver: bridge

services:
  kong-migrations:
    image: kong-docker-kong-enterprise-edition-docker.bintray.io/kong-enterprise-edition:1.5.0.2-alpine
    container_name: case-kong-ee-mig
    networks:
      - case-kong-net
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PASSWORD: password
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
    restart: on-failure

  kong-node1:
    image: kong-docker-kong-enterprise-edition-docker.bintray.io/kong-enterprise-edition:1.5.0.2-alpine
    container_name: case-kong-node1
    networks:
      - case-kong-net
    user: "${KONG_USER:-kong}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./ssl-certs:/tmp/ssl/customcerts
      - ./tracing:/usr/local/kong/tracing
      - ./plugins/kong-plugin-support-info/:/usr/local/share/lua/5.1/kong/plugins/support-info
    environment:
      KONG_PROXY_LISTEN: "0.0.0.0:48000, 0.0.0.0:48443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:48001, 0.0.0.0:48444 ssl"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:48002, 0.0.0.0:48445 ssl"
      KONG_PORTAL_GUI_LISTEN: "0.0.0.0:48003, 0.0.0.0:48446 ssl"
      KONG_PORTAL_API_LISTEN: "0.0.0.0:48004, 0.0.0.0:48447 ssl"
      KONG_STATUS_LISTEN: "0.0.0.0:48100"
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      #KONG_PG_HOST: toxiproxy
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_AUDIT_LOG: "on"
      KONG_ANONYMOUS_REPORTS: "off"
      KONG_VITALS: "on"
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
      KONG_LOG_LEVEL: "debug"
      KONG_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_ENFORCE_RBAC: "on"
      KONG_ADMIN_API_URI: "https://api.kong.lan:8444"
      KONG_ADMIN_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_ADMIN_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_ADMIN_GUI_URL: "https://api.kong.lan:8445"
      KONG_ADMIN_GUI_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_ADMIN_GUI_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_ADMIN_GUI_AUTH: "basic-auth"
      #KONG_ADMIN_GUI_AUTH: "ldap-auth-advanced"
      #KONG_ADMIN_GUI_AUTH_CONF: "{\"bind_dn\":\"cn=Administrator,cn=users,dc=ldap,dc=kong,dc=com\",\"ldap_password\":\"Passw0rd\",\"attribute\":\"sAMAccountName\",\"base_dn\":\"cn=Users,dc=ldap,dc=kong,dc=com\",\"cache_ttl\":2,\"header_type\":\"Basic\",\"keepalive\":60000,\"ldap_host\":\"ad-server\",\"ldap_port\":389,\"ldaps\":false,\"start_tls\":false,\"timeout\":10000,\"verify_ldap_host\": false }"
      KONG_ADMIN_GUI_SESSION_CONF: "{ \"cookie_name\": \"manager-session\", \"secret\": \"this_is_my_other_secret\", \"storage\": \"kong\", \"cookie_secure\":true, \"cookie_lifetime\":36000}"
      KONG_PORTAL: "on"
      KONG_PORTAL_GUI_PROTOCOL: "https"
      KONG_PORTAL_GUI_HOST: "api.kong.lan:8446"
      KONG_PORTAL_GUI_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_PORTAL_GUI_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_PORTAL_API_URL: "https://api.kong.lan:8447"
      KONG_PORTAL_API_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_PORTAL_API_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_PORTAL_AUTH: "openid-connect"
      KONG_PORTAL_AUTH_CONF: "{\"leeway\":100,\"consumer_by\":[\"username\",\"custom_id\",\"id\"],\"scopes\":[\"openid\",\"profile\",\"email\",\"offline_access\"],\"logout_query_arg\":\"logout\",\"client_id\":[\"kong\"],\"redirect_uri\":[\"https://api.kong.lan:8446//default\"],\"login_action\":\"redirect\",\"login_redirect_uri\":[\"https://api.kong.lan:8446//default\"],\"login_redirect_mode\":\"query\",\"logout_redirect_uri\":[\"https://api.kong.lan:8446//default\"],\"logout_methods\":[\"GET\"],\"consumer_claim\":[\"email\"],\"forbidden_redirect_uri\":[\"hhttps://api.kong.lan:8446/default/unauthorized\"],\"issuer\":\"http://10.0.10.1:8080/auth/realms/kong/.well-known/openid-configuration\",\"client_secret\":[\"ab523f45-e04a-43ec-bac7-2e268c2ff05c\"],\"ssl_verify\":false}"
      KONG_PORTAL_SESSION_CONF: "{\"cookie_name\":\"portal-session\",\"secret\":\"this_is_my_secret\",\"storage\":\"kong\",\"cookie_secure\":true}"
      KONG_PORTAL_EMAIL_VERIFICATION: "on"
      KONG_PORTAL_EMAILS_FROM: "stu@konghq.com"
      KONG_PORTAL_EMAILS_REPLY_TO: "stu@konghq.com"
      KONG_ADMIN_EMAILS_FROM: "stu@konghq.com"
      KONG_ADMIN_EMAILS_REPLY_TO: "stu@konghq.com"
      KONG_SMTP_MOCK: "off"
      KONG_SMTP_ADMIN_EMAILS: "stu@konghq.com"
      KONG_SMTP_HOST: "fake-smtp-server"
      KONG_SMTP_PORT: 1025
      KONG_SMTP_DOMAIN: "api.konglan"
      KONG_TRACING: "off"
      KONG_TRACING_DEBUG_HEADER: "X-Kong-Debug"
      KONG_TRACING_WRITE_ENDPOINT: "/usr/local/kong/tracing/kong-postgres.trc"
      KONG_GENERATE_TRACE_DETAILS: "on"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure

  kong-node2:
    image: kong-docker-kong-enterprise-edition-docker.bintray.io/kong-enterprise-edition:1.5.0.2-alpine
    container_name: case-kong-node2
    networks:
      - case-kong-net
    user: "${KONG_USER:-kong}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./ssl-certs:/tmp/ssl/customcerts
      - ./tracing:/usr/local/kong/tracing
      - ./plugins/kong-plugin-support-info/:/usr/local/share/lua/5.1/kong/plugins/support-info
    environment:
      KONG_PROXY_LISTEN: "0.0.0.0:48000, 0.0.0.0:48443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:48001, 0.0.0.0:48444 ssl"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:48002, 0.0.0.0:48445 ssl"
      KONG_PORTAL_GUI_LISTEN: "0.0.0.0:48003, 0.0.0.0:48446 ssl"
      KONG_PORTAL_API_LISTEN: "0.0.0.0:48004, 0.0.0.0:48447 ssl"
      KONG_STATUS_LISTEN: "0.0.0.0:48100"
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      #KONG_PG_HOST: toxiproxy
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_AUDIT_LOG: "on"
      KONG_ANONYMOUS_REPORTS: "off"
      KONG_VITALS: "on"
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
      KONG_LOG_LEVEL: "debug"
      KONG_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_ENFORCE_RBAC: "on"
      KONG_ADMIN_API_URI: "https://api.kong.lan:8444"
      KONG_ADMIN_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_ADMIN_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_ADMIN_GUI_URL: "https://api.kong.lan:8445"
      KONG_ADMIN_GUI_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_ADMIN_GUI_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_ADMIN_GUI_AUTH: "basic-auth"
      #KONG_ADMIN_GUI_AUTH: "ldap-auth-advanced"
      #KONG_ADMIN_GUI_AUTH_CONF: "{\"bind_dn\":\"cn=Administrator,cn=users,dc=ldap,dc=kong,dc=com\",\"ldap_password\":\"Passw0rd\",\"attribute\":\"sAMAccountName\",\"base_dn\":\"cn=Users,dc=ldap,dc=kong,dc=com\",\"cache_ttl\":2,\"header_type\":\"Basic\",\"keepalive\":60000,\"ldap_host\":\"ad-server\",\"ldap_port\":389,\"ldaps\":false,\"start_tls\":false,\"timeout\":10000,\"verify_ldap_host\": false }"
      KONG_ADMIN_GUI_SESSION_CONF: "{ \"cookie_name\": \"manager-session\", \"secret\": \"this_is_my_other_secret\", \"storage\": \"kong\", \"cookie_secure\":true, \"cookie_lifetime\":36000}"
      KONG_PORTAL: "on"
      KONG_PORTAL_GUI_PROTOCOL: "https"
      KONG_PORTAL_GUI_HOST: "api.kong.lan:8446"
      KONG_PORTAL_GUI_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_PORTAL_GUI_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_PORTAL_API_URL: "https://api.kong.lan:8447"
      KONG_PORTAL_API_SSL_CERT_KEY: "/tmp/ssl/customcerts/server.key"
      KONG_PORTAL_API_SSL_CERT: "/tmp/ssl/customcerts/server.crt"
      KONG_PORTAL_AUTH: "openid-connect"
      KONG_PORTAL_AUTH_CONF: "{\"leeway\":100,\"consumer_by\":[\"username\",\"custom_id\",\"id\"],\"scopes\":[\"openid\",\"profile\",\"email\",\"offline_access\"],\"logout_query_arg\":\"logout\",\"client_id\":[\"kong\"],\"redirect_uri\":[\"https://api.kong.lan:8446//default\"],\"login_action\":\"redirect\",\"login_redirect_uri\":[\"https://api.kong.lan:8446//default\"],\"login_redirect_mode\":\"query\",\"logout_redirect_uri\":[\"https://api.kong.lan:8446//default\"],\"logout_methods\":[\"GET\"],\"consumer_claim\":[\"email\"],\"forbidden_redirect_uri\":[\"hhttps://api.kong.lan:8446/default/unauthorized\"],\"issuer\":\"http://10.0.10.1:8080/auth/realms/kong/.well-known/openid-configuration\",\"client_secret\":[\"ab523f45-e04a-43ec-bac7-2e268c2ff05c\"],\"ssl_verify\":false}"
      KONG_PORTAL_SESSION_CONF: "{\"cookie_name\":\"portal-session\",\"secret\":\"this_is_my_secret\",\"storage\":\"kong\",\"cookie_secure\":true}"
      KONG_PORTAL_EMAIL_VERIFICATION: "on"
      KONG_PORTAL_EMAILS_FROM: "stu@konghq.com"
      KONG_PORTAL_EMAILS_REPLY_TO: "stu@konghq.com"
      KONG_ADMIN_EMAILS_FROM: "stu@konghq.com"
      KONG_ADMIN_EMAILS_REPLY_TO: "stu@konghq.com"
      KONG_SMTP_MOCK: "off"
      KONG_SMTP_ADMIN_EMAILS: "stu@konghq.com"
      KONG_SMTP_HOST: "fake-smtp-server"
      KONG_SMTP_PORT: 1025
      KONG_SMTP_DOMAIN: "api.konglan"
      KONG_TRACING: "off"
      KONG_TRACING_DEBUG_HEADER: "X-Kong-Debug"
      KONG_TRACING_WRITE_ENDPOINT: "/usr/local/kong/tracing/kong-postgres.trc"
      KONG_GENERATE_TRACE_DETAILS: "on"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure

  db:
    networks:
      - case-kong-net
    image: postgres:9.5
    container_name: case-kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true

  ad-server:
    networks:
      - case-kong-net
    container_name: case-ad-server
    image: nginx:1.17.3-alpine
    volumes:
      - ./ldap-server:/setup-ad/
    # run as privileged to workaround this issue
    # set_nt_acl_no_snum: fset_nt_acl returned NT_STATUS_ACCESS_DENIED
    privileged: true
    ports:
      - "389:389/tcp"

  httpbin-1:
    networks:
      - case-kong-net
    container_name: case-httpbin-1
    image: "kennethreitz/httpbin"
#    ports:
#      - "80:80/tcp"

  httpbin-2:
    networks:
      - case-kong-net
    container_name: case-httpbin-2
    image: "kennethreitz/httpbin"
#    ports:
#      - "80:80/tcp"

  keycloak:
    networks:
      - case-kong-net
    container_name: case-keycloak
    image: jboss/keycloak:9.0.0
    volumes:
      - ./kong-realm.json:/tmp/kong-realm.json
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
      KEYCLOAK_IMPORT: /tmp/kong-realm.json -Dkeycloak.profile.feature.upload_scripts=enabled
    ports:
      - "8080:8080/tcp"
      - "18443:8443/tcp"

  redis:
    networks:
      - case-kong-net
    container_name: case-redis
    image: redis:latest
#    ports:
#      - "6379:6379/tcp"

  zipkin:
    networks:
      - case-kong-net
    container_name: case-zipkin
    image: openzipkin/zipkin
#    ports:
#      - "9411:9411/tcp"

  vault:
    networks:
      - case-kong-net
    container_name: case-vault
    image: vault:latest
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
#    ports:
#      - "8200:8200/tcp"

  toxiproxy:
    networks:
      - case-kong-net
    container_name: case-toxiproxy
    image: "shopify/toxiproxy"
    ports:
       - "8474:8474"

  # Create a toxiproxy configuration for postgres latency
  toxiproxy-config:
    networks:
      - case-kong-net
    container_name: case-toxiproxy-config
    image: "shopify/toxiproxy"
    entrypoint: > 
      sh -c "/go/bin/toxiproxy-cli -h toxiproxy:8474 create postgres_network --listen 0.0.0.0:5432 --upstream db:5432;
             /go/bin/toxiproxy-cli -h toxiproxy:8474 toxic add postgres_network -t latency -a latency=100 -a jitter=50;"

  ha-proxy:
    networks:
      - case-kong-net
    container_name: case-ha-proxy
    image: haproxy:2.2.4-alpine
    volumes:
      - ./ha-proxy:/usr/local/etc/haproxy:ro
    depends_on:
      kong-node1:
        condition: service_healthy
      kong-node2:
        condition: service_healthy
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "8000-8004:8000-8004/tcp"
      - "8443-8447:8443-8447/tcp"
      - "8100:8100/tcp"
      - "8404:8404/tcp"
      - "9999:9999/tcp"

  deck:
    networks:
      - case-kong-net
    container_name: case-deck
    image: kong/deck:v1.2.3
    volumes:
        - .:/tmp:ro
    environment:
        DECK_ANALYTICS: "off"
        DECK_KONG_ADDR: "http://api.kong.lan:8001"
        #DECK_KONG_ADDR: "https://api.kong.lan:8444"
        DECK_HEADERS: "kong-admin-token:password"
    depends_on:
      kong-node1:
        condition: service_healthy
      kong-node2:
        condition: service_healthy
    #command: "sync --ca-cert="$(cat /tmp/ssl-certs/rootCA.pem)" --state=/tmp/workspace-compose.yaml"
    command: sync --state=/tmp/workspace-compose.yaml

  locust:
    networks:
      - case-kong-net
    container_name: case-locust
    image: locustio/locust
    ports:
     - "8089:8089"
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py

  fake-smtp-server:
    networks:
      - case-kong-net
    container_name: case-fake-smtp-server
    image: reachfive/fake-smtp-server
    ports:
      #- "25:1025/tcp"
      - "1080:1080/tcp"

