#version: '2.2'

secrets:
  kong_license:
    file: ../../.kong-license-data/license.json
  pg_password:
    environment: "SECRET_PG_PASSWORD"
  pg_password_in_file:
    file: ./tmp/POSTGRES_PASSWORD


# Specify which Kong image to run
x-kong-image:
  #image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway:3.4.3.20}
  #image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway:3.8.1.2}
  #image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway:3.9.1.2}
  #image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway:3.10.0.3}
  #image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway:3.11.0.1}
  #image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway-dev
  &kong-image
  image: ${KONG_DOCKER_IMAGE:-kong/kong-gateway:3.11.0.1}

x-kong-license:
  &kong-license
  KONG_LICENSE_DATA: ${KONG_LICENSE_DATA:?err}
  #KONG_LICENSE_PATH: /run/secrets/kong_license
  KONG_PORTAL_AND_VITALS_KEY: "d2cb4be4f720c007d40ebdd6e750324a9e1019e542f97be964c31f8e86ccb8f6"

# Kong database config
x-kong-db-config:
  &kong-db-config
  KONG_DATABASE: postgres
  KONG_PG_HOST: db
  KONG_PG_DATABASE: kong
  KONG_PG_USER: kong
#  KONG_PG_PASSWORD: kong
  KONG_PG_PASSWORD_FILE: "/run/secrets/pg_password_in_file"
  KONG_PASSWORD: password

#  KONG_DATABASE: cassandra
#  KONG_CASSANDRA_CONTACT_POINTS: db
#  KONG_DB_UPDATE_PROPAGATION: 1
 # KONG_PASSWORD: password
 # KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}

# Common config values
x-kong-common-config:
  &kong-common-config
  KONG_PREFIX: "/tmp/kong"
  KONG_ADMIN_LISTEN: "0.0.0.0:48001, 0.0.0.0:48444 http2 ssl reuseport backlog=65536"
  KONG_STATUS_LISTEN: "0.0.0.0:48100 ssl"
  KONG_DEBUG_LISTEN: "0.0.0.0:48200 ssl"
  KONG_VITALS: "on"
  #KONG_VITALS_STRATEGY: prometheus
  #KONG_VITALS_STATSD_ADDRESS: statsd-exporter:9125
  #KONG_VITALS_TSDB_ADDRESS: prometheus:9090
  KONG_ANONYMOUS_REPORTS: "off"
  KONG_ADMIN_SSL_CERT_KEY: "/tmp/ssl/customcerts/smallstep/kong.lan.key"
  KONG_ADMIN_SSL_CERT: "/tmp/ssl/customcerts/smallstep/kong.lan.pem"
  KONG_PORTAL_API_SSL_CERT_KEY: "/tmp/ssl/customcerts/smallstep/kong.lan.key"
  KONG_PORTAL_API_SSL_CERT: "/tmp/ssl/customcerts/smallstep/kong.lan.pem"
  KONG_LOG_LEVEL: "debug"
  KONG_SSL_CERT_KEY: "/tmp/ssl/customcerts/smallstep/kong.lan.key"
  KONG_SSL_CERT: "/tmp/ssl/customcerts/smallstep/kong.lan.pem"
  KONG_CLUSTER_CERT: /tmp/ssl/customcerts/hybrid/cluster.crt
  KONG_CLUSTER_CERT_KEY: /tmp/ssl/customcerts/hybrid/cluster.key
  KONG_STATUS_SSL_CERT_KEY: "/tmp/ssl/customcerts/smallstep/kong.lan.key"
  KONG_STATUS_SSL_CERT: "/tmp/ssl/customcerts/smallstep/kong.lan.pem"
  KONG_DEBUG_SSL_CERT_KEY: "/tmp/ssl/customcerts/smallstep/kong.lan.key"
  KONG_DEBUG_SSL_CERT: "/tmp/ssl/customcerts/smallstep/kong.lan.pem"
#  KONG_LUA_SSL_TRUSTED_CERTIFICATE: /tmp/ssl/customcerts/hybrid/cluster.crt,system
#  KONG_LUA_SSL_VERIFY_DEPTH: 5
  KONG_NGINX_PROXY_PROXY_SSL_VERIFY: "on"
  KONG_NGINX_PROXY_PROXY_SSL_TRUSTED_CERTIFICATE: "/etc/ssl/certs/ca-certificates.crt"
  KONG_NGINX_PROXY_PROXY_SSL_PROTOCOLS: TLSv1 TLSv1.1 TLSv1.2 TLSv1.3
  KONG_NGINX_WORKER_PROCESSES: 2
  KONG_EVENT_HOOKS_ENABLED: "on"
  KONG_TRUSTED_IPS: "0.0.0.0/0"
  KONG_REAL_IP_HEADER: "X-Forwarded-For"
#  KONG_REAL_IP_HEADER: "proxy-protocol"
  KONG_REAL_IP_RECURSIVE: "on"
#  KONG_NGINX_HTTP_LUA_TRANSFORM_UNDERSCORES_IN_RESPONSE_HEADERS: "off"
  KONG_LUA_PACKAGE_PATH: "/usr/local/custom_plugins/?.lua;;"
#  KONG_PLUGINS: "bundled, service-protection"
#  KONG_PLUGINS: "bundled, log-filter, custom-handler"
#  KONG_PLUGINS: "bundled, custom-handler"
#  KONG_PLUGINS: "bundled, openid-connect_1051"
#  KONG_PLUGINS: "bundled, custom_admin_api"
#  KONG_NGINX_PROXY_KEEPALIVE_REQUESTS: 0
#  KONG_NGINX_HTTP_MORE_CLEAR_HEADERS: "x-kong-admin-request-id"

#  KONG_ROUTER_FLAVOR: "traditional"
#  KONG_ROUTER_FLAVOR: "expressions"
#  KONG_NGINX_PROXY_BROTLI: "on"
#  KONG_NGINX_PROXY_BROTLI_COMP_LEVEL: 4
#  KONG_NGINX_PROXY_BROTLI_TYPES: "*"
#  KONG_ROUTE_VALIDATION_STRATEGY: "path"
#  KONG_ENFORCE_ROUTE_PATH_PATTERN: "/$(workspace)/.*"

#  KONG_SSL_PROTOCOLS: "TLSv1 TLSv1.1 TLSv1.2 TLSv1.3"
#  KONG_SSL_CIPHER_SUITE: "old"
#  KONG_SSL_PROTOCOLS: "TLSv1 TLSv1.1 TLSv1.2 TLSv1.3"
#  KONG_SSL_CONF_COMMAND: "CipherString DEFAULT:@SECLEVEL=0;"
#  LUA_SSL_PROTOCOLS: "TLSv1.1 TLSv1.2 TLSv1.3"
#  LUA_SSL_CONF_COMMAND: "CipherString DEFAULT:@SECLEVEL=0;"
#  KONG_SSL_CIPHER_SUITE: "custom"
#  KONG_SSL_CIPHERS: "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:RSA-PSK-AES256-GCM-SHA384:DHE-PSK-AES256-GCM-SHA384:RSA-PSK-CHACHA20-POLY1305:DHE-PSK-CHACHA20-POLY1305:ECDHE-PSK-CHACHA20-POLY1305:AES256-GCM-SHA384:PSK-AES256-GCM-SHA384:PSK-CHACHA20-POLY1305:RSA-PSK-AES128-GCM-SHA256:DHE-PSK-AES128-GCM-SHA256:AES128-GCM-SHA256:PSK-AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:ECDHE-PSK-AES256-CBC-SHA384:ECDHE-PSK-AES256-CBC-SHA:SRP-RSA-AES-256-CBC-SHA:SRP-AES-256-CBC-SHA:RSA-PSK-AES256-CBC-SHA384:DHE-PSK-AES256-CBC-SHA384:RSA-PSK-AES256-CBC-SHA:DHE-PSK-AES256-CBC-SHA:AES256-SHA:PSK-AES256-CBC-SHA384:PSK-AES256-CBC-SHA:ECDHE-PSK-AES128-CBC-SHA256:ECDHE-PSK-AES128-CBC-SHA:SRP-RSA-AES-128-CBC-SHA:SRP-AES-128-CBC-SHA:RSA-PSK-AES128-CBC-SHA256:DHE-PSK-AES128-CBC-SHA256:RSA-PSK-AES128-CBC-SHA:DHE-PSK-AES128-CBC-SHA:AES128-SHA:PSK-AES128-CBC-SHA256:PSK-AES128-CBC-SHA"
#  KONG_NGINX_HTTP_LUA_SHARED_DICT: "kong_rate_limiting_locks 11m; lua_shared_dict kong_service_protection_locks 10m"
#  KONG_ADMIN_TOKEN_DEV: "dev-token"
#  KONG_ADMIN_TOKEN_STST_INTERNAL: "stst-internal-token"
#  KONG_ADMIN_TOKEN_STST_EXTERNAL: "stst-external-token"
#  KONG_ADMIN_TOKEN_PROD_INTERNAL: "prod-internal-token"
#  KONG_ADMIN_TOKEN_PROD_EXTERNAL: "prod-external-token"
#  KONG_ADMIN_TOKEN_CP: "password"
#  KONG_ADMIN_TOKEN_CP2: "kong-admin-token: password-wrong"
  KONG_REQUEST_DEBUG_TOKEN: "request_debug_token"
  KONG_ADMIN_GUI_HIDE_KONNECT_CTA: true

  # Common values for kong-cp and kong-dp
x-kong-container-common:
  &kong-container-common
  healthcheck:
    test: [ "CMD", "kong", "health" ]
    interval: 10s
    timeout: 10s
    retries: 10
  restart: on-failure
#  read_only: true
  tmpfs:
    - /tmp
networks:
  kongpose-net:
    name: kongpose-net
    driver: bridge
  kongpose-net-internal:
    name: kongpose-net-internal
    driver: bridge
    internal: true

services:
  kong-migrations:
    <<: *kong-image
    networks:
      - kongpose-net
    command: "kong migrations bootstrap"
    environment:
      <<: [ *kong-license, *kong-db-config ]
    restart: on-failure
    secrets:
      - pg_password
      - pg_password_in_file

  kong-migrations-all-up:
    <<: *kong-image
    profiles: [ "upgrade", "everything" ]
    networks:
      - kongpose-net
    command: kong migrations up
    environment:
      <<: [ *kong-license, *kong-db-config ]
    restart: on-failure
    secrets:
      - pg_password
      - pg_password_in_file

  kong-migrations-all-finish:
    <<: *kong-image
    profiles: [ "upgrade", "everything" ]
    depends_on:
      kong-migrations-all-up:
        condition: service_completed_successfully
    networks:
      - kongpose-net
    command: kong migrations finish
    environment:
      <<: [ *kong-license, *kong-db-config ]
    restart: on-failure
    secrets:
      - pg_password
      - pg_password_in_file

  kong-migrations-upgrade:
    <<: *kong-image
    profiles: [ "upgrade", "everything" ]
    networks:
      - kongpose-net
    command: "kong migrations up"
    environment:
      <<: [ *kong-license, *kong-db-config ]
    restart: on-failure
    secrets:
      - pg_password
      - pg_password_in_file

  kong-migrations-finish:
    <<: *kong-image
    profiles: [ "upgrade-finish", "everything" ]
    networks:
      - kongpose-net
    command: "kong migrations finish"
    environment:
      <<: [ *kong-license, *kong-db-config ]
    restart: on-failure
    secrets:
      - pg_password
      - pg_password_in_file

  kong-migrations-list:
    <<: *kong-image
    profiles: [ "upgrade-list", "everything" ]
    networks:
      - kongpose-net
    command: "kong migrations list"
    environment:
      <<: [ *kong-license, *kong-db-config ]
    restart: on-failure
    secrets:
      - pg_password
      - pg_password_in_file

  kong-cp:
    <<: [ *kong-image, *kong-container-common ]
    deploy:
      replicas: 1
    mem_limit: 2g
    cpus: 1
    networks:
      - kongpose-net
      - kongpose-net-internal
    user: "${KONG_USER:-kong}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./ssl-certs:/tmp/ssl/customcerts
      - ./tracing:/usr/local/kong/tracing
      - ./http_content:/tmp/htdocs
      - ./grpcbin:/tmp/grpcbin
      - ./custom_plugins:/usr/local/custom_plugins
#
    secrets:
      - kong_license
      - pg_password
      - pg_password_in_file

    environment:
      <<: [ *kong-license, *kong-db-config, *kong-common-config ]
      KONG_PROXY_LISTEN: "off"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:48002, 0.0.0.0:48445 http2 ssl"
      KONG_PORTAL_GUI_LISTEN: "0.0.0.0:48003, 0.0.0.0:48446 http2 ssl"
      KONG_PORTAL_API_LISTEN: "0.0.0.0:48004, 0.0.0.0:48447 http2 ssl"
      KONG_CLUSTER_LISTEN: "0.0.0.0:48005"
      KONG_CLUSTER_TELEMETRY_LISTEN: "0.0.0.0:48006"
      KONG_PG_MAX_CONCURRENT_QUERIES: 5
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_GUI_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_GUI_ERROR_LOG: /dev/stderr
      KONG_PORTAL_API_ACCESS_LOG: /dev/stdout
      KONG_PORTAL_API_ERROR_LOG: /dev/stderr
      KONG_PORTAL_GUI_ACCESS_LOG: /dev/stdout
      KONG_PORTAL_GUI_ERROR_LOG: /dev/stderr
      KONG_STATUS_ACCESS_LOG: /dev/stdout
      KONG_STATUS_ERROR_LOG: /dev/stderr
      KONG_ENFORCE_RBAC: "on"
      KONG_ADMIN_API_URI: "https://api.kong.lan"
      KONG_ADMIN_GUI_URL: "https://manager.kong.lan"
      KONG_ADMIN_GUI_SSL_CERT_KEY: "/tmp/ssl/customcerts/smallstep/kong.lan.key"
      KONG_ADMIN_GUI_SSL_CERT: "/tmp/ssl/customcerts/smallstep/kong.lan.pem"
      KONG_ADMIN_GUI_SESSION_CONF: '{ "cookie_name": "admin_session", "secret": "this_is_my_other_secret", "storage": "kong", "cookie_secure":true}'
      # Kong Manager auth via BasicAuth
      #KONG_ADMIN_GUI_AUTH: "basic-auth"
      # Kong Manager auth via local LDAP(AD) server
      KONG_ADMIN_GUI_AUTH: "ldap-auth-advanced"
      KONG_ADMIN_GUI_AUTH_CONF: "{\"bind_dn\":\"cn=Administrator,cn=users,dc=ldap,dc=kong,dc=com\",\"ldap_password\":\"Passw0rd\",\"attribute\":\"sAMAccountName\",\"base_dn\":\"cn=Users,dc=ldap,dc=kong,dc=com\",\"cache_ttl\":2,\"header_type\":\"Basic\",\"keepalive\":60000,\"ldap_host\":\"ad-server\",\"ldap_port\":389,\"ldaps\":false,\"start_tls\":false,\"timeout\":10000,\"verify_ldap_host\": false, \"log_search_results\":true }"
      # KONG_ADMIN_GUI_AUTH: "openid-connect"
      # Kong Manager auth via OIDC & Auth0
      # KONG_ADMIN_GUI_AUTH_CONF: "{\"auth_methods\":[\"authorization_code\"],\"client_id\":[\"nXSQjPrb12T73C0zj5dnCoQ7e96w16MZ\"],\"client_secret\":[\"PZW96frUNv_dydghldnP73aDyeAC1M3-6knRv5pZ_Ia1R2oMksA9hB6x1brR2dHy\"],\"consumer_by\":[\"username\",\"custom_id\"],\"consumer_claim\":[\"name\"],\"issuer\":\"https://dev-37bfcwdn.eu.auth0.com\",\"login_redirect_uri\":[\"https://manager.kong.lan/\"],\"logout_methods\":[\"GET\",\"DELETE\",\"POST\"],\"logout_query_arg\":\"logout\",\"logout_redirect_uri\":[\"https://manager.kong.lan/\"],\"redirect_uri\":[\"https://manager.kong.lan/\"],\"scopes\":[\"openid\",\"profile\"],\"session_cookie_name\":\"kong_manager_session\",\"ssl_verify\":false}"
      # KONG_ADMIN_GUI_AUTH_CONF: "{\"auth_methods\":[\"authorization_code\",\"session\"],\"client_id\":[\"nXSQjPrb12T73C0zj5dnCoQ7e96w16MZ\"],\"client_secret\":[\"PZW96frUNv_dydghldnP73aDyeAC1M3-6knRv5pZ_Ia1R2oMksA9hB6x1brR2dHy\"],\"consumer_by\":[\"username\",\"custom_id\"],\"consumer_claim\":[\"name\"],\"issuer\":\"https://dev-37bfcwdn.eu.auth0.com\",\"login_redirect_uri\":[\"https://manager.kong.lan/\"],\"logout_methods\":[\"GET\",\"DELETE\",\"POST\"],\"logout_query_arg\":\"logout\",\"logout_redirect_uri\":[\"https://manager.kong.lan/\"],\"redirect_uri\":[\"https://manager.kong.lan/\"],\"scopes\":[\"openid\",\"profile\"],\"session_cookie_name\":\"kong_manager_session\",\"ssl_verify\":false}"
      # Kong Manager auth via OIDC & Azure AD
      # KONG_ADMIN_GUI_AUTH_CONF: "{\"auth_methods\":[\"authorization_code\",\"password\"],\"client_id\":[\"4bf4e6a0-43db-4f89-b901-342045486873\"],\"client_secret\":[\"wdy7Q~aIi_hEE4eQd~wwkm5UK2.g.jr1SZVhl\"],\"consumer_by\":[\"username\",\"custom_id\"],\"admin_claim\":\"name\",\"issuer\":\"https://login.microsoftonline.com/e4bf00f3-2010-40d6-b82f-58df9f957e49/v2.0/.well-known/openid-configuration\",\"login_redirect_uri\":[\"https://manager.kong.lan/\"],\"logout_methods\":[\"GET\",\"DELETE\",\"POST\"],\"logout_query_arg\":\"logout\",\"logout_redirect_uri\":[\"https://manager.kong.lan/\"],\"redirect_uri\":[\"https://manager.kong.lan/\"],\"scopes\":[\"openid\",\"profile\",\"email\",\"4bf4e6a0-43db-4f89-b901-342045486873/.default\"],\"session_cookie_name\":\"kong_manager_session\",\"ssl_verify\":false, \"authenticated_groups_claim\":[\"groups\"]}"
      # Kong Manager auth via OIDC & Azure AD with a POST method (from 2.8.4.0)
      #KONG_ADMIN_GUI_AUTH_CONF: "{\"auth_methods\": [\"authorization_code\", \"password\", \"session\"],\"client_id\": [\"4bf4e6a0-43db-4f89-b901-342045486873\"],\"client_secret\": [\"wdy7Q~aIi_hEE4eQd~wwkm5UK2.g.jr1SZVhl\"],\"consumer_by\": [\"username\", \"custom_id\"],\"admin_claim\": \"name\",\"issuer\": \"https://login.microsoftonline.com/e4bf00f3-2010-40d6-b82f-58df9f957e49/v2.0/.well-known/openid-configuration\",\"login_redirect_uri\": [\"https://manager.kong.lan/\"],\"logout_methods\": [\"GET\", \"DELETE\", \"POST\"],\"logout_query_arg\": \"logout\",\"logout_redirect_uri\": [\"https://manager.kong.lan/\"],\"redirect_uri\": [\"https://api.kong.lan/auth\"],\"scopes\": [\"openid\", \"profile\", \"email\", \"4bf4e6a0-43db-4f89-b901-342045486873/.default\"],\"session_cookie_name\": \"kong_manager_session\",\"ssl_verify\": false,\"authenticated_groups_claim\": [\"groups\"],\n\"preserve_query_args\": true,\"login_action\": \"redirect\",\n\"response_mode\": \"form_post\"}"
      KONG_PORTAL: "on"
      KONG_PORTAL_GUI_PROTOCOL: "https"
      KONG_PORTAL_GUI_HOST: "portal.kong.lan"
      KONG_PORTAL_GUI_SSL_CERT_KEY: "/tmp/ssl/customcerts/smallstep/kong.lan.key"
      KONG_PORTAL_GUI_SSL_CERT: "/tmp/ssl/customcerts/smallstep/kong.lan.pem"
      KONG_PORTAL_API_URL: "https://portal-api.kong.lan"
      KONG_PORTAL_AUTH: "openid-connect"
      # Kong DevPortal auth via OIDC & KeyCloak
      #KONG_PORTAL_AUTH_CONF: "{\"client_secret\":[\"ab523f45-e04a-43ec-bac7-2e268c2ff05c\"],\"redirect_uri\":[\"https://portal-api.kong.lan/default/auth\"],\"consumer_by\":[\"username\",\"custom_id\",\"id\"],\"scopes\":[\"openid\",\"profile\",\"email\",\"offline_access\"],\"logout_query_arg\":\"logout\",\"logout_methods\":[\"GET\"],\"login_action\":\"redirect\",\"logout_redirect_uri\":[\"https://portal.kong.lan/default\"],\"client_id\":[\"kong\"],\"issuer\":\"https://keycloak.kong.lan:18443/auth/realms/kong/.well-known/openid-configuration\",\"forbidden_redirect_uri\":[\"https://portal.kong.lan/default/unauthorized\"],\"leeway\":100,\"login_redirect_uri\":[\"https://portal.kong.lan/default\"],\"ssl_verify\":false,\"consumer_claim\":[\"email\"],\"login_redirect_mode\":\"query\",\"session_cookie_domain\": \".kong.lan\",\"by_username_ignore_case\":true}"
      # Kong DevPortal auth via OIDC & Okta
      # KONG_PORTAL_AUTH_CONF: "{\"client_secret\":[\"7zxU14d1b5NTNf31p5lhShVX1N1UfWp3BHayU8kw\"],\"redirect_uri\":[\"https://portal-api.kong.lan/default/auth\"],\"consumer_by\":[\"username\",\"custom_id\",\"id\"],\"scopes\":[\"openid\",\"profile\",\"email\",\"offline_access\"],\"logout_query_arg\":\"logout\",\"logout_methods\":[\"GET\"],\"login_action\":\"redirect\",\"logout_redirect_uri\":[\"https://portal.kong.lan/default\"],\"client_id\":[\"0oa4q0et31F47l9Nq4x6\"],\"issuer\":\"https://dev-885513.okta.com/oauth2/default/.well-known/oauth-authorization-server\",\"forbidden_redirect_uri\":[\"https://portal.kong.lan/default/unauthorized\"],\"leeway\":100,\"login_redirect_uri\":[\"https://portal.kong.lan/default\"],\"ssl_verify\":false,\"consumer_claim\":[\"email\"],\"login_redirect_mode\":\"query\",\"session_cookie_domain\": \".kong.lan\"}"
      # Kong DevPortal auth via OIDC & Azure AD
      KONG_PORTAL_AUTH_CONF: "{\"auth_methods\":[\"authorization_code\",\"session\"],\"authorization_cookie_domain\":\".kong.lan\",\"authorization_cookie_samesite\":\"None\",\"authorization_cookie_secure\":true,\"client_id\":[\"4bf4e6a0-43db-4f89-b901-342045486873\"],\"client_secret\":[\"wdy7Q~aIi_hEE4eQd~wwkm5UK2.g.jr1SZVhl\"],\"consumer_by\":[\"username\",\"custom_id\",\"id\"],\"consumer_claim\":[\"email\"],\"forbidden_redirect_uri\":[\"https://portal.kong.lan/default/unauthorized\"],\"issuer\":\"https://login.microsoftonline.com/e4bf00f3-2010-40d6-b82f-58df9f957e49/v2.0/.well-known/openid-configuration\",\"leeway\":100,\"login_action\":\"redirect\",\"login_redirect_mode\":\"query\",\"login_redirect_uri\":[\"https://portal.kong.lan/default\"],\"logout_methods\":[\"GET\"],\"logout_query_arg\":\"logout\",\"logout_redirect_uri\":[\"https://portal.kong.lan/default\"],\"redirect_uri\":[\"https://portal-api.kong.lan/default/auth\"],\"scopes\":[\"openid\",\"profile\",\"email\",\"4bf4e6a0-43db-4f89-b901-342045486873/.default\"],\"session_cookie_domain\":\".kong.lan\",\"session_cookie_samesite\":\"None\",\"session_cookie_secure\":true,\"session_storage\":\"cookie\",\"ssl_verify\":false,\"verify_parameters\":false,\"by_username_ignore_case\":true}"
      #KONG_PORTAL_SESSION_CONF: "{\"cookie_name\":\"portal-session\",\"secret\":\"this_is_my_secret\",\"storage\":\"kong\",\"cookie_secure\":true, \"cookie_domain\":\".kong.lan\", \"cookie_samesite\":\"off\"}"
      KONG_PORTAL_EMAIL_VERIFICATION: "off"
      KONG_PORTAL_EMAILS_FROM: "stu@konghq.com"
      KONG_PORTAL_EMAILS_REPLY_TO: "stu@konghq.com"
      KONG_ADMIN_EMAILS_FROM: "stu@konghq.com"
      KONG_ADMIN_EMAILS_REPLY_TO: "stu@konghq.com"
      KONG_PORTAL_APPLICATION_REQUEST_EMAIL: "on"
      KONG_PORTAL_APPLICATION_STATUS_EMAIL: "on"
      #KONG_PORTAL_GUI_USE_SUBDOMAINS: "on"
      KONG_SMTP_MOCK: "off"
      KONG_SMTP_ADMIN_EMAILS: "stu@konghq.com"
      KONG_SMTP_HOST: "fake-smtp-server"
      KONG_SMTP_PORT: 1025
      KONG_SMTP_DOMAIN: "api.kong.lan"
      KONG_TRACING: "off"
      KONG_TRACING_DEBUG_HEADER: "X-Kong-Debug"
      KONG_TRACING_WRITE_ENDPOINT: "/usr/local/kong/tracing/kong-postgres.trc"
      KONG_GENERATE_TRACE_DETAILS: "on"
      KONG_ROLE: control_plane
      KONG_CLUSTER_DATA_PLANE_PURGE_DELAY: 60
      #KONG_NGINX_HTTP_INCLUDE: "/tmp/htdocs/http_server.conf"
      KONG_NGINX_HTTP_INCLUDE: "/tmp/htdocs/http_server.conf; include /tmp/htdocs/http_server2.conf"
      #KONG_KEYRING_ENABLED: "on"
      #KONG_KEYRING_STRATEGY: "cluster"
      #KONG_KEYRING_PUBLIC_KEY: "/tmp/ssl/customcerts/keyring/keyring-public-key.pem"
      #KONG_KEYRING_PRIVATE_KEY: "/tmp/ssl/customcerts/keyring/keyring-private-key.pem"
      KONG_AUDIT_LOG: "on"
      #KONG_AUDIT_LOG_IGNORE_METHODS: "OPTIONS"
      #KONG_AUDIT_LOG_PAYLOAD_EXCLUDE: "token, secret, password, config.redis.password"
      #KONG_AUDIT_LOG_PAYLOAD_EXCLUDE: "token, secret, password, config"
      #KONG_AUDIT_LOG_RECORD_TTL: 2592000
      KONG_ADMIN_GUI_LOGIN_BANNER_TITLE: "Limited Access"
      KONG_ADMIN_GUI_LOGIN_BANNER_BODY: "Access by unauthorised personnel is prohibited"
      KONG_ADMIN_GUI_HEADER_TXT: "*** Support environment ***"
      KONG_ADMIN_GUI_HEADER_BG_COLOR: "green"
      KONG_ADMIN_GUI_HEADER_TXT_COLOR: "white"

  kong-dp:
    <<: [ *kong-image, *kong-container-common ]
    #mem_limit: 8g
    deploy:
      replicas: 1
    networks:
      - kongpose-net
      - kongpose-net-internal
    # add this capability if you want to install and run iptables rules on the DP
    cap_add:
      - NET_ADMIN
    depends_on:
      kong-cp:
        condition: service_healthy
    volumes:
      - ./ssl-certs:/tmp/ssl/customcerts
      - ./tracing:/usr/local/kong/tracing
      - ./config:/tmp/kong_config
      - ./grpcbin:/tmp/grpcbin
      - ./custom_plugins:/usr/local/custom_plugins

    environment:
      <<: [ *kong-license, *kong-common-config ]
      KONG_PROXY_LISTEN: "0.0.0.0:48000, 0.0.0.0:48443 http2 ssl reuseport backlog=65536, 0.0.0.0:48800 proxy_protocol, 0.0.0.0:48843 http2 ssl reuseport backlog=65536 proxy_protocol"
      KONG_STREAM_LISTEN: "0.0.0.0:45555, 0.0.0.0:45556 ssl reuseport backlog=65536"
#     KONG_PROXY_ACCESS_LOG: /dev/stdout show_correlation_id
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_DATABASE: "off"
      KONG_ROLE: data_plane
      KONG_CLUSTER_CONTROL_PLANE: kong-cp:48005
      KONG_CLUSTER_TELEMETRY_ENDPOINT: kong-cp:48006
      KONG_DATA_PLANE_CONFIG_CACHE_PATH: "/tmp/kong_config/config.cache.json.gz"
#      KONG_NGINX_PROXY_LUA_TRANSFORM_UNDERSCORES_IN_RESPONSE_HEADERS: "off"
#      KONG_NGINX_HTTP_LOG_FORMAT: "show_correlation_id  '$$remote_addr - $$remote_user [$$time_local] $$request $$status $$body_bytes_sent $$http_referer $$http_user_agent  Kong-Request-ID=$$http_X_Correlation_ID'"
#      KONG_NGINX_HTTP_LOG_FORMAT: "athenalog 'escape=json {time_iso8601: $$time_iso8601}'"
#      KONG_NGINX_HTTP_LOG_FORMAT: "json_combined escape=json '{\"time_local\":\"$$time_local\",\"remote_addr\":\"$$remote_addr\",\"remote_user\":\"$$remote_user\",\"request\":\"$$request\",\"status\":\"$$status\",\"body_bytes_sent\":\"$$body_bytes_sent\",\"request_time\":\"$$request_time\",\"http_referrer\":\"$$http_referer\",\"http_user_agent\":\"$$http_user_agent\"}'"
#      KONG_NGINX_HTTP_LOG_FORMAT:  "athenalog escape=json '{\"gateway_log_type\": \"FULLLOG [AUDIT]\",\"time_iso8601\": \"$$time_iso8601\",\"gateway_request_id\": \"gateway_request_id\",\"athena_gw_request_id\": \"athena_gw_request_id\",\"remote_user\": \"$$remote_user\",\"request_method\": \"$$request_method\",\"uri\": \"$$uri\",\"host\": \"$$host\",\"scheme\": \"$$scheme\",\"server_name\": \"$$server_name\",\"upstream_addr\": \"$$upstream_addr\",\"status\": \"$$status\",\"upstream_status\": \"$$upstream_status\",\"proxy_host\": \"$$proxy_host\",\"upstream_http_Location\": \"$$upstream_http_Location\",\"http_x_client_id\": \"$$http_x_client_id\",\"document_root\":\"$$document_root\",\"server_addr\": \"$$server_addr\",\"http_user_agent\": \"$$http_user_agent\",\"http_x_forwarded_for\": \"$$http_x_forwarded_for\",\"http_x_forwarded_host\": \"$$http_x_forwarded_host\",\"http_x_forwarded_proto\": \"$$http_x_forwarded_proto\",\"http_x_forwarded_port\": \"$$http_x_forwarded_port\",\"server_port\": \"$$server_port\",\"msec\": \"$$msec\",\"request_length\": \"$$request_length\",\"body_bytes_sent\": \"$$body_bytes_sent\",\"request_time\": \"$$request_time\",\"upstream_connect_time\": \"$$upstream_connect_time\",\"upstream_header_time\": \"$$upstream_header_time\",\"upstream_response_time\": \"$$upstream_response_time\",\"stack_id\": \"stack_id\",\"context_id\": \"context_id\",\"client_id\": \"client_id\",\"kong_service_name\": \"kong_service_name\",\"route_name\": \"route_name\",\"environment\": \"environment\"};'"

# log_format athenalog escape=json '{'
#                '"gateway_log_type": "FULLLOG [AUDIT]",'
#                '"time_iso8601": "$time_iso8601",'
#                '"gateway_request_id": "$gateway_request_id",'
#                '"athena_gw_request_id": "$athena_gw_request_id",'
#                '"remote_user": "$remote_user",'
#                '"request_method": "$request_method",'
#                '"uri": "$uri",'
#                '"host": "$host",'
#                '"scheme": "$scheme",'
#                '"server_name": "$server_name",'
#                '"upstream_addr": "$upstream_addr",'
#                '"status": "$status",'
#                '"upstream_status": "$upstream_status",'
#                '"proxy_host": "$proxy_host",'
#                '"upstream_http_Location": "$upstream_http_Location",'
#                '"http_x_client_id": "$http_x_client_id",'
#                '"document_root":"$document_root",'
#                '"server_addr": "$server_addr",'
#                '"http_user_agent": "$http_user_agent",'
#                '"http_x_forwarded_for": "$http_x_forwarded_for",'
#                '"http_x_forwarded_host": "$http_x_forwarded_host",'
#                '"http_x_forwarded_proto": "$http_x_forwarded_proto",'
#                '"http_x_forwarded_port": "$http_x_forwarded_port",'
#                '"server_port": "$server_port",'
#                '"msec": "$msec",'
#                '"request_length": "$request_length",'
#                '"body_bytes_sent": "$body_bytes_sent",'
#                '"request_time": "$request_time",'
#                '"upstream_connect_time": "$upstream_connect_time",'
#                '"upstream_header_time": "$upstream_header_time",'
#                '"upstream_response_time": "$upstream_response_time",'
#                '"stack_id": "$stack_id",'
#                '"context_id": "$context_id",'
#                '"client_id": "$client_id",'
#                '"kong_service_name": "$kong_service_name",'
#                '"route_name": "$route_name",'
#                '"environment": "$environment"'
#                '}';

#      KONG_PROXY_KEEPALIVE_TIMEOUT: 0
#      KONG_PROXY_KEEPALIVE_REQUESTS: 1
#      KONG_NGINX_PROXY_MORE_CLEAR_HEADERS: "kong-route-id kong-route-name kong-service-id kong-service-name"
      KONG_TRACING_INSTRUMENTATIONS: "all"
      KONG_TRACING_SAMPLING_RATE: "1"
#      KONG_HEADERS: "off"
    ports:
      - "18443:48443/tcp"
  db:
    networks:
      - kongpose-net
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
      # Uncomment if kong version <2.3.2.0 i.e. does not support scram-sha256
      #POSTGRES_HOST_AUTH_METHOD: md5
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true

#  db:
#    networks:
#      - kongpose-net
#    image: cassandra:3
#    healthcheck:
#      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
#      interval: 30s
#      timeout: 10s
#      retries: 5

  ad-server:
    networks:
      - kongpose-net
    image: alpine:3.17
    volumes:
      - ./ldap-server:/setup-ad/:ro
    # run as privileged to workaround this issue
    # set_nt_acl_no_snum: fset_nt_acl returned NT_STATUS_ACCESS_DENIED
    privileged: true
    command: >
      sh -c "/setup-ad/setup.sh && bash /setup-ad/seed.sh && samba -i --debuglevel=1"
    ports:
      - "389:389/tcp"

  httpbin:
    networks:
      - kongpose-net
      - kongpose-net-internal
    image: "kennethreitz/httpbin"
    deploy:
      replicas: 2
  #    ports:
  #      - "80:80/tcp"

  mockbin:
    networks:
      - kongpose-net
      - kongpose-net-internal
    image: "mashape/mockbin:latest"
  #    ports:
  #      - "80:80/tcp"

  # use ./tcpbin/Dockerfile to build a local image for the tcpbin echo repo
  # https://github.com/Kong/tcpbin
  #
  # tcpbin:
  #   networks:
  #     - kongpose-net
  #   image: "tcpbin:latest"

  echo-server:
    networks:
      - kongpose-net
    image: "jmalloc/echo-server"
    profiles: [ "upstream", "everything" ]
  #    ports:
  #      - "8080:8080/tcp"

  echo-http-https:
    networks:
      - kongpose-net
    image: "mendhak/http-https-echo"
    profiles: [ "upstream", "everything" ]
    environment:
      MTLS_ENABLE: 1
  #    ports:
  #      - "8080:8080/tcp"
  #      - "8443:8443/tcp"


  dadjokes:
    networks:
      - kongpose-net
    image: yesinteractive/dadjokes
    profiles: [ "upstream", "everything" ]
  #    ports:
  #      - "8081:80"

  grpc-server:
    networks:
      - kongpose-net
    image: "moul/grpcbin"
    profiles: [ "upstream", "everything" ]
    ports:
      - "9000:9000/tcp"
      - "9001:9001/tcp"

  keycloak:
    networks:
      - kongpose-net
    #image: jboss/keycloak:9.0.0
    #image: jboss/keycloak:15.0.2
    image: quay.io/keycloak/keycloak:15.0.2
    profiles: [ "auth", "everything" ]
    mem_limit: 1g
    volumes:
      - ./keycloak/kong-realm.json:/tmp/kong-realm.json
      - ./ssl-certs/smallstep/wild.kong.lan.key:/etc/x509/https/tls.key
      - ./ssl-certs/smallstep/wild.kong.lan.pem:/etc/x509/https/tls.crt
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
      KEYCLOAK_IMPORT: /tmp/kong-realm.json -Dkeycloak.profile.feature.upload_scripts=enabled
    ports:
      - "8080:8080/tcp"
      - "28443:8443/tcp"

  redis:
    networks:
      - kongpose-net
      - kongpose-net-internal
    image: redis:latest
  #    ports:
  #      - "6379:6379/tcp"

  redis-new:
    networks:
      - kongpose-net
      - kongpose-net-internal
    image: redis:latest
  #    ports:
  #      - "6379:6379/tcp"

  redis-cluster:
    networks:
      - kongpose-net
      - kongpose-net-internal
    image: redis:latest
    hostname: redis-node
    deploy:
      replicas: 6
    profiles: [ "redis-cluster", "everything" ]
    volumes:
      - ./redis-cluster/cluster-config.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-commander:
    networks:
      - kongpose-net
      - kongpose-net-internal
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    profiles: [ "utility", "everything" ]
    environment:
      REDIS_HOSTS: redis
    ports:
      - "8081:8081"

  zipkin:
    networks:
      - kongpose-net
    image: openzipkin/zipkin
    profiles: [ "utility", "everything" ]
    ports:
      - "9411:9411/tcp"

  vault:
    networks:
      - kongpose-net
    image: vault:latest
    profiles: [ "utility", "everything" ]
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
  #    ports:
  #      - "8200:8200/tcp"

  toxiproxy:
    networks:
      - kongpose-net
    image: "shopify/toxiproxy"
    profiles: [ "utility", "everything" ]
    ports:
      - "8474:8474"

  # Create a toxiproxy configuration for postgres latency
  toxiproxy-config:
    networks:
      - kongpose-net
    image: "shopify/toxiproxy"
    profiles: [ "utility", "everything" ]
    entrypoint: >
      sh -c "/go/bin/toxiproxy-cli -h toxiproxy:8474 create proxy_latency --listen 0.0.0.0:8000 --upstream httpbin:80;
             /go/bin/toxiproxy-cli -h toxiproxy:8474 toxic add proxy_latency --upstream -t latency -a latency=5000 -a jitter=0;"

  ha-proxy:
    networks:
      - kongpose-net
      - kongpose-net-internal
    image: haproxy:2.3.5-alpine
    volumes:
      - ./ha-proxy:/usr/local/etc/haproxy:ro
      - ./ssl-certs:/tmp/ssl/customcerts
    depends_on:
      kong-cp:
        condition: service_healthy
      kong-dp:
        condition: service_healthy
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "8000-8004:8000-8004/tcp"
      - "8443-8447:8443-8447/tcp"
      - "8100-8101:8100-8101/tcp"
      - "8181:8181/tcp"
      - "8200-8201:8200-8201/tcp"
      - "8404:8404/tcp"
      - "8800:8800/tcp"
      - "8843:8843/tcp"
      - "9999:9999/tcp"
      - "5555-5556:5555-5556/tcp"

  deck:
    networks:
      - kongpose-net
    image: kong/deck:latest
    volumes:
      - ./deck:/tmp/deck:ro
      - ./ssl-certs:/tmp/ssl-certs:ro
    environment:
      DECK_ANALYTICS: "off"
      DECK_KONG_ADDR: "http://kong-cp:48001"
      DECK_HEADERS: "kong-admin-token:password"
    depends_on:
      kong-cp:
        condition: service_healthy
      kong-dp:
        condition: service_healthy
    entrypoint: >
      sh -c "/usr/local/bin/deck gateway sync --workspace default /tmp/deck/default-entities.yaml;
             /usr/local/bin/deck gateway sync --skip-ca-certificates --workspace haproxy-hc /tmp/deck/hc-entities.yaml;
             /usr/local/bin/deck gateway sync --skip-ca-certificates --workspace mtls /tmp/deck/mtls-entities.yaml;"

  locust:
    networks:
      - kongpose-net
#    image: locustio/locust:2.14.2
    image: locustio/locust
    profiles: [ "utility", "everything" ]
    #ports:
    # - "8089:8089"
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py

  fake-smtp-server:
    networks:
      - kongpose-net
    image: reachfive/fake-smtp-server
    #ports:
    #- "25:1025/tcp"
    #- "1080:1080/tcp"

  mongodb:
    networks:
      - kongpose-net
    image: mongo:4.2
    profiles: [ "graylog", "everything" ]
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3

  elasticsearch:
    networks:
      - kongpose-net
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0
    profiles: [ "graylog", "everything" ]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g

  graylog:
    networks:
      - kongpose-net
    image: graylog/graylog:4.0.7
    profiles: [ "graylog", "everything" ]
    volumes:
      #- ./graylog/server.conf:/etc/graylog/server.conf
      - ./graylog/content_packs:/usr/share/graylog/data/contentpacks
    depends_on:
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      # CHANGE ME (must be at least 16 characters)!
      GRAYLOG_PASSWORD_SECRET: somepasswordpepper
      # Password: admin
      GRAYLOG_ROOT_PASSWORD_SHA2: 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      GRAYLOG_HTTP_EXTERNAL_URI: https://graylog.kong.lan/
      GRAYLOG_HTTP_PUBLISH_URI: https://graylog.kong.lan/
      GRAYLOG_CONTENT_PACKS_LOADER_ENABLED: "true"
      GRAYLOG_CONTENT_PACKS_DIR: /usr/share/graylog/data/contentpacks
      GRAYLOG_CONTENT_PACKS_AUTO_INSTALL: kong-log-endpoints.json
    links:
      - mongodb:mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - 9000:9000
      # Syslog TCP
      #- 1514:1514
      # Syslog UDP
      #- 1514:1514/udp
      # GELF TCP
      #- 12201:12201
      # GELF UDP
      #- 12201:12201/udp
      #- "5555:5555"
      #- "5555:5555/udp"

  pgadmin:
    networks:
      - kongpose-net
    image: dpage/pgadmin4
    profiles: [ "utility", "everything" ]
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - ./pgadmin/config_local.py:/pgadmin4/config_local.py #  - ./pgadmin_data/pgadmin:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: "stu@konghq.com"
      PGADMIN_DEFAULT_PASSWORD: "password"
      PGADMIN_LISTEN_PORT: 7071
    ports:
      - "7071:7071"

  zookeeper:
    image: 'bitnami/zookeeper:3.6.2'
    profiles: [ "kafka", "everything" ]
    networks:
      - kongpose-net
    #   ports:
    #     - '12181:12181'
    #   volumes:
    #     - zk-1:/bitnami/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_PORT_NUMBER=12181
      - ZOO_SERVER_ID=1
      - ZOO_SERVERS=0.0.0.0:2888:3888
      - ZOO_TICK_TIME=2000
      - ZOO_INIT_LIMIT=10
      - ZOO_SYNC_LIMIT=5
      - ZOO_MAX_CLIENT_CNXNS=60
      - ZOO_HEAP_SIZE=1024
      - ZOO_AUTOPURGE_PURGEINTERVAL=72
      - ZOO_AUTOPURGE_SNAPRETAINCOUNT=3

  kafka:
    #image: 'bitnami/kafka:2.7.0'
    image: 'bitnami/kafka:2.2.1'
    profiles: [ "kafka", "everything" ]
    networks:
      - kongpose-net
    #   ports:
    #     - '19093:19093'
    environment:
      - KAFKA_CFG_BROKER_ID=101
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:12181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://:9092,EXTERNAL://kafka-1:19093
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_HEAP_OPTS=-Xmx1024m -Xms1024m

    #   volumes:
    #     - 'kafka_data:/bitnami'
    depends_on:
      - zookeeper

  kafka-ui:
    image: 'obsidiandynamics/kafdrop'
    profiles: [ "kafka", "everything" ]
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - SERVER_PORT=8080
    networks:
      - kongpose-net
    #   ports:
    #     - "8787:8080"
    depends_on:
      - kafka
      - zookeeper

  # elasticsearch-v:
  #   container_name: elasticsearch
  #   hostname: elasticsearch
  #   networks:
  #     - kongpose-net
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.11.2
  #   environment:
  #     - ES_JAVA_OPTS=-Xms1g -Xmx1g
  #     - discovery.type=single-node

  kibana:
    image: docker.elastic.co/kibana/kibana:7.11.2
    profiles: [ "utility", "everything" ]
    networks:
      - kongpose-net
    #   hostname: kibana
    #   container_name: kibana
    ports:
      - 5601:5601

  # filebeat:
  #   image: docker.elastic.co/beats/filebeat:7.2.0
  #   hostname: filebeat
  #   networks:
  #     - kongpose-net
  #   container_name: filebeat
  #   user: root
  #   volumes:
  #     - ./data/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #     - /var/lib/docker:/var/lib/docker:ro
  #     - /var/run/docker.sock:/var/run/docker.sock

  statsd-exporter:
    image: prom/statsd-exporter:latest
    profiles: [ "prometheus", "everything" ]
    #image: kong/statsd-exporter-advanced:0.3.1
    networks:
      - kongpose-net
    user: root
    volumes:
      - ./statsd-exporter/statsd.rules.yaml:/tmp/statsd.rules.yaml
    command:
      - "--statsd.mapping-config=/tmp/statsd.rules.yaml"
      - "--statsd.listen-unixgram=''"

  prometheus:
    image: prom/prometheus:v2.35.0
    profiles: [ "prometheus" ]
    networks:
      - kongpose-net
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--log.level=debug"
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:7.5.1
    profiles: [ "prometheus", "everything" ]
    networks:
      - kongpose-net
    #   container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_SERVER_DOMAIN=grafana.kong.lan

  opa:
    image: openpolicyagent/opa:latest
    profiles: [ "auth", "everything" ]
    networks:
      - kongpose-net
    #   container_name: opa
    #   ports:
    #     - "8181:8181"
    volumes:
      - ./opa/policies/:/records
    command: "run --server --addr :8181 /records"

#  statsd:
#    image: statsd/statsd
#    profiles: [ "utility" , "everything"]
#    networks:
#      - kongpose-net
#   ports:
#     - "8125:8125"

  flask:
#    image: flask-app:latest
    image: python:latest
    profiles: [ "utility", "everything"]
    networks:
      - kongpose-net
    volumes:
      - ./flask/:/flask
#    ports:
#      - "8432:80"

  squid:
    image: ubuntu/squid
    profiles: [ "squid", "everything" ]
    networks:
      - kongpose-net
      - kongpose-net-internal
    ports:
      - "3128:3128"
      - "4128:4128"
    volumes:
      - ./squid/squid.conf:/etc/squid/squid.conf
      - ./squid/passwords:/etc/squid/passwords

  tcpdump:
    image: kaazing/tcpdump
    profiles: [ "tcpdump", "everything" ]
    network_mode: service:kong-dp
    volumes:
      - ./tcpdump:/tcpdump
    command: [ "-s", "0", "-i", "any", "-w", "/tcpdump/dns.pcap", "port 53"]

  jaeger:
    networks:
      - kongpose-net
      - kongpose-net-internal
#   image: jaegertracing/all-in-one:1.50
    image: jaegertracing/all-in-one
    profiles: [ "tracing", "everything" ]
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
#    ports:
#      - 5775:5775/udp
#      - 6831:6831/udp
#      - 6832:6832/udp
#      - 5778:5778
#      - 16686:16686 # UI
#      - 14268:14268
#      - 14250:14250
#      - 9411:9411

  nginx:
    networks:
      - kongpose-net
      - kongpose-net-internal
    image: nginx
    profiles: [ "nginx", "everything" ]
    volumes:
        - ./nginx/src:/var/www
        - ./nginx/nginx-proxy.conf:/etc/nginx/conf.d/nginx-proxy.conf
    ports:
      - 8888:8888

  splunk:
    networks:
      - kongpose-net
      - kongpose-net-internal
    image: splunk/splunk:9.0.2
    profiles: [ "splunk", "everything" ]
    environment:
      SPLUNK_START_ARGS: "--accept-license"
      SPLUNK_HEC_TOKEN: "abcd1234"
      SPLUNK_PASSWORD: "K1ngK0ng"
      SPLUNK_LICENSE_URI: "Free"
#    ports:
#      - 8300:8000
#      - 8388:8088

  otel-collector:
      networks:
        - kongpose-net
        - kongpose-net-internal
      image: otel/opentelemetry-collector-contrib
      profiles: [ "otel", "everything" ]
      volumes:
        - ./otel-collector/config.yaml:/etc/otelcol-contrib/config.yaml
      ports:
        - 1888:1888 # pprof extension
        - 8888:8888 # Prometheus metrics exposed by the Collector
        - 8889:8889 # Prometheus exporter metrics
        - 13133:13133 # health_check extension
        - 4317:4317 # OTLP gRPC receiver
        - 4318:4318 # OTLP http receiver
        - 55679:55679 # zpages extension

  konnect-dp:
      <<: [ *kong-image ]
#      image: kong/kong-gateway:3.10.0.3
      networks:
        - kongpose-net
        - kongpose-net-internal
      profiles: [ "konnect", "everything" ]
      environment:
        KONG_ANONYMOUS_REPORTS: "off"
        KONG_ROLE: "data_plane"
        KONG_DATABASE: "off"
        KONG_LOG_LEVEL: "debug"
        KONG_VITALS: "off"
        KONG_CLUSTER_MTLS: "pki"
        KONG_CLUSTER_CONTROL_PLANE: "68152badf0.us.cp0.konghq.com:443"
        KONG_CLUSTER_SERVER_NAME: "68152badf0.us.cp0.konghq.com"
        KONG_CLUSTER_TELEMETRY_ENDPOINT: "68152badf0.us.tp0.konghq.com:443"
        KONG_CLUSTER_TELEMETRY_SERVER_NAME: "68152badf0.us.tp0.konghq.com"
        KONG_CLUSTER_CERT: "-----BEGIN CERTIFICATE-----\nMIICBTCCAaygAwIBAgIBATAKBggqhkjOPQQDBDA0MTIwCQYDVQQGEwJVUzAlBgNV\nBAMeHgBrAG8AbgBuAGUAYwB0AC0AZABlAGYAYQB1AGwAdDAeFw0yNTAyMjYxMTI5\nMTNaFw0zNTAyMjYxMTI5MTNaMDQxMjAJBgNVBAYTAlVTMCUGA1UEAx4eAGsAbwBu\nAG4AZQBjAHQALQBkAGUAZgBhAHUAbAB0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD\nQgAEs1zKFKNQpGdAAb3wlvPF+ONRUccKtyYoL5avWmqr0yUTsM5x0SrX7+Yw0Wyy\ncmLPurJXYDvftXGXkcppSPbPj6OBrjCBqzAMBgNVHRMBAf8EAjAAMAsGA1UdDwQE\nAwIABjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwFwYJKwYBBAGCNxQC\nBAoMCGNlcnRUeXBlMCMGCSsGAQQBgjcVAgQWBBQBAQEBAQEBAQEBAQEBAQEBAQEB\nATAcBgkrBgEEAYI3FQcEDzANBgUpAQEBAQIBCgIBFDATBgkrBgEEAYI3FQEEBgIE\nABQACjAKBggqhkjOPQQDBANHADBEAiB4lSqd+N/SZ7xDlDJ1WmXRMVsJc14rGZoY\nxwMB4N31RgIgEoE7Y3TKcQPiQozMgkfp+o6Tl8Gckb59wJ9BfSYmx2Q=\n-----END CERTIFICATE-----"
        KONG_CLUSTER_CERT_KEY: "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgq1n36mmuuRBJKrPA\nv/0gNWeDMyAcXZky8HanNjEwSAKgCgYIKoZIzj0DAQehRANCAASzXMoUo1CkZ0AB\nvfCW88X441FRxwq3Jigvlq9aaqvTJROwznHRKtfv5jDRbLJyYs+6sldgO9+1cZeR\nymlI9s+P\n-----END PRIVATE KEY-----" 
        KONG_LUA_SSL_TRUSTED_CERTIFICATE: "system"
        KONG_KONNECT_MODE: "on"
        KONG_CLUSTER_RPC: "on"
        KONG_ACTIVE_TRACING: "on"
#      ports:
#       - 8000:8000
#       - 8443:8443


  solace:
#      image: solace/solace-pubsub-standard
      image: solace/solace-pubsub-standard
      shm_size: '1g'
      platform: linux/amd64
      networks:
        - kongpose-net
        - kongpose-net-internal
      profiles: [ "solace", "everything" ]
      environment:
        username_admin_globalaccesslevel: "admin"
        username_admin_password: "admin"
      ports:
        - 8080:8080  # Use this port when configuring the message broker container with Solace PubSub+ Broker Manager.
        - 55555:55555 # Your applications can use Solace APIs to connect to the message broker on this port
        - 8008:8008 # The JavaScript sample applications below use this port to pass Web Messaging traffic through the message broker
#        - 1883:1883 # Ports for MQTT connectivity, over TCP 
#        - 8000:8000 # Ports for MQTT connectivity, over WebSockets
#        - 5672:5672 # AMQP 1.0 applications using Apache QPID APIs would connect here
        - 9000:9000 # Use REST to send messaging and event data with Solace’s RESTful API port
        - 2222:2222 # Use SSH to connect to the Solace Command Line Interface (CLI) for advanced configuration

